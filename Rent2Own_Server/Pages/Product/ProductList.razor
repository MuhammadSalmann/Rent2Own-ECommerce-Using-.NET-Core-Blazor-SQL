 @page "/product"
@inject IFileUpload _fileUpload
@inject IJSRuntime _jsRuntime
@* @attribute [Authorize] *@
@inject NavigationManager _navigationManager

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Product List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="product/create" class="btn btn-primary form-control">Add New Product </a>
    </div>
    <div class="col-12 p-3">
        @if (Products.Any())
        {
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Shop Favorites</th>
                        <th>Customer Favorites</th>
                        <th>Category</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prod in Products)
                    {
                        <tr>
                            <td>
                                @prod.Name
                            </td>
                            <th>
                                <input type="checkbox" disabled checked="@prod.ShopFavorites">
                            </th>
                            <th>
                                <input type="checkbox" disabled checked="@prod.CustomerFavorites">
                            </th>
                            <th>
                                @prod.Category.Name
                            </th>
                            <td>
                                <NavLink href="@($"product/edit/{prod.Id}")" class="btn btn-primary">Edit</NavLink>
                                <NavLink href="@($"product/price/{prod.Id}")" class="btn btn-success">Price</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(prod.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="text-center">
                    <img src="/images/loading.gif">
                </div>
            }
            else
            {
                //no records
                <p>No Records Found.</p>
            }
        }
    </div>
</div>

@code {
    private List<Product> Products { get; set; } = new List<Product>();
    public bool IsLoading { get; set; } = true;
    private int DeleteProductId { get; set; } = 0;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            var uri = new Uri(_navigationManager.Uri);
            _navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true);
        }
        else
        {
            if (!authState.User.IsInRole(Rent2Own_Common.SD.Role_Admin))
            {
                _navigationManager.NavigateTo("/ErrorPage");
            }
        }

        await Task.Run(LoadProducts);
    }

    public void LoadProducts()
    {
        Products = ProductOperations.GetAll();
        IsLoading = false;
    }
    public void HandleDelete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    public async Task ConfirmDelete_Click(bool isConfirmed)  //isConfirmed is filled from child
    {
        IsLoading = true;
        if (isConfirmed && DeleteProductId != 0)
        {
            //await Task.Delay(2000);
            Product product = ProductOperations.Get(DeleteProductId);
            if (!product.ImageUrl.Contains("default.png"))   //default img should not be deleted permanently
            {
                _fileUpload.DeleteFile(product.ImageUrl);
            }
            //delete
            ProductOperations.Delete(DeleteProductId);
            await _jsRuntime.ToastrSuccess("Product Deleted successfully");
            LoadProducts();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading = false;
    }   
}
