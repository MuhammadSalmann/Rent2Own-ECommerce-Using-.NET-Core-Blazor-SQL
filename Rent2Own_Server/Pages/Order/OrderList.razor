@page "/orderList"
@inject IOrderOperations _orderOperations
@inject NavigationManager _navigationManager
@attribute [Authorize] 
<div>
    <h4 class="ml-5 mb-5 card-title text-info">Order's List</h4>
    @if (OrderHeaders.Any())
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" PageSize="5" AllowPaging="true" AllowSorting="true" 
        Data="OrderHeaders" TItem="OrderHeader" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="OrderHeader" Property="Id" Filterable="false" Title="ID" Frozen="true" />
            <RadzenDataGridColumn TItem="OrderHeader" Property="Name" Title="Name" />
            <RadzenDataGridColumn TItem="OrderHeader" Property="PhoneNumber" Title="Phone"   />
            <RadzenDataGridColumn TItem="OrderHeader" Property="Email" Title="Email"   />
            <RadzenDataGridColumn TItem="OrderHeader" Property="OrderTotal" Title="Total"   />
            <RadzenDataGridColumn TItem="OrderHeader" Property="OrderDate" Title="Order Date" FormatString="{0:d}" />
            <RadzenDataGridColumn TItem="OrderHeader" Property="Status" Title="Status" />
            <RadzenDataGridColumn TItem="OrderHeader" Title="Details" >
                <Template Context="data">
                    <RadzenButton Click="(args=> OrderDetails(data.Id))" Text="Details" ButtonStyle="ButtonStyle.Success"></RadzenButton>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    }
     else
        {
            if (IsLoading)
            {
                //loading gif
                <div class="text-center">
                <img src="/images/loading.gif">
                    </div>
            }
        }
</div>


@code {

    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();
    private bool IsLoading { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrders();
        }
    }


    private async Task LoadOrders()
    {
        IsLoading = true;
        StateHasChanged();
        var Orders = await _orderOperations.GetAll();
        OrderHeaders = Orders.Select(u => u.OrderHeader);
        IsLoading = false;
        StateHasChanged();
    }

     private void OrderDetails(int id)
    {
        _navigationManager.NavigateTo("/order/details/" + id);
    }
}
