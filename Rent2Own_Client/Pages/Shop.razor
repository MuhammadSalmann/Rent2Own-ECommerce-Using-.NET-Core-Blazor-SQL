@page "/shop"
@page "/shop/{Confirmation:bool}"
@inject IProductService _productService

@* For Order Confirmation *@
@inject ILocalStorageService _localStorage
@inject IOrderService _orderService
@inject IJSRuntime _jsRuntime
@inject ICartService _cartService

@if (IsProcessing)
{
    <div style="height: 60vh; width: 100%;">
        <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
            <img src="images/ajax-loader.gif" />
        </div>
    </div>
}
else
{
        <div class="container py-3">
        <div class="row justify-content-center">
            <div class="col-lg-9">
                <div class="row">
                    <div class="col-md-6">
                        <ul class="list-inline shop-top-menu pb-3 pt-1">
                            <li class="list-inline-item">
                                <h2 class="text-black">All Categories</h2>
                            </li>
                        </ul>
                    </div>
                    <div class="col-md-6 pb-4">
                        <div class="d-flex">
                            <select class="form-control">
                                <option>Featured</option>
                                <option>A to Z</option>
                                <option>Item</option>
                            </select>
                        </div>
                    </div>
                </div>
             </div>
         </div>
        </div>
<div class="container">
    <div class="row  pb-3 pt-3 backgroundWhite">
        @foreach(var category in Products.Select(u=>u.Category.Name).Distinct()){        
            <h2 class="text-success pl-1"><b>@category</b></h2>
                @foreach (var product in Products.Where(u => u.Category.Name==category))
                {
                    <div class="col-lg-4 col-md-6 pb-4 filter">
                        <div class="card bg-white rounded shadow-sm" style="border:1px solid #222">
                <div class="card-body pb-1 row">
                    <div class="col-8 h5">@product.Name</div>
                    <div class="col-4 text-end"><span class="text-info h4">
                        @product.ProductPrices.OrderBy(u => u.Price).FirstOrDefault()?.Price.ToString("c", new System.Globalization.CultureInfo("en-US"))

                    </span></div>
                </div>

                <img class="card-img-top img-fluid d-block mx-auto mb-3" src="@product.ImageUrl" alt="menuitem image">
                <div class="card-body p-1 px-3 row">
                    <div class="col-6">
                        <span class="badge p-2 border w-100 text-dark bg-warning ">@product.Category.Name</span>
                    </div>
                    <div class="col-6 border-0">
                        <span class="badge p-2 border w-100 bg-info ">@product.Model</span>
                    </div>
                    <div class="col-12 pt-2" style="font-size:13px; text-align:justify">
                        <p>@((MarkupString)product.Description)</p>
                    </div>
                    <div class="col-12 p-1">
                        <a href="/details/@product.Id" class="btn btn-dark form-control btn-sm p-2" style="height:40px">View Details</a>
                    </div>
                </div>
            </div>
        </div>
        }
        }
    </div>
</div>
}

@code{
    public bool IsProcessing { get; set; } = false;
    public List<Product> Products { get; set; } = new List<Product>();

    // For Order Confirmation
    private Order Order { get; set; }
    private List<ShoppingCart> ShoppingCart = new List<ShoppingCart>();
    [Parameter]
    public bool Confirmation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsProcessing=true;
        Products = await _productService.GetAll();

        if(Confirmation)
        {
            await Task.Run(ConfirmationCheck);
        }

        IsProcessing=false;
    }

    public async void ConfirmationCheck() {

        Order = await _localStorage.GetItemAsync<Order>(SD.Local_OrderDetails);
        // logic to check payment and update status
        var updatedOrder = await _orderService.MarkPaymentSuccessful(Order.OrderHeader);
        if (updatedOrder.Status == SD.Status_Confirmed)
        {
            Order.OrderHeader.Status = updatedOrder.Status;
            // Clearing Local Storage
            await _localStorage.RemoveItemAsync(SD.Local_OrderDetails);
            ShoppingCart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart);
            foreach (var item in ShoppingCart)
            {
                await _cartService.DecrementCart(new()
                    {
                        Count = 0,
                        ProductId = item.ProductId,
                        ProductPriceId = item.ProductPriceId
                    });
            }
        }
        if (Order.OrderHeader.Status == SD.Status_Confirmed)
        {
            await _jsRuntime.SweetPic("Order Placed !", $"Your Order ID: {Order.OrderHeader.Id}");
        }
        else
        {
            await _jsRuntime.SweetError("Order Failed !", $"Contact Us with Order ID: {Order.OrderHeader.Id}");
        }
    }
}